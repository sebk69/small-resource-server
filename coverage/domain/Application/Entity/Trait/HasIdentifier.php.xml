<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="HasIdentifier.php" path="/domain/Application/Entity/Trait">
    <totals>
      <lines total="196" comments="45" code="151" executable="78" executed="67" percent="85.90"/>
      <methods count="4" tested="1" percent="25.00"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="0" tested="0" percent="0"/>
      <traits count="1" tested="0" percent="0.00"/>
    </totals>
    <trait name="Domain\Application\Entity\Trait\HasIdentifier" start="13" executable="78" executed="67" crap="36.05">
      <namespace name="Domain\Application\Entity\Trait"/>
      <method name="getId" signature="getId(): ?string" start="32" end="35" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="init" signature="init(): void" start="38" end="81" crap="17.84" executable="21" executed="18" coverage="85.714285714286"/>
      <method name="generateId" signature="generateId(): self" start="86" end="154" crap="9.41" executable="35" executed="29" coverage="82.857142857143"/>
      <method name="encodeBase32Crockford" signature="encodeBase32Crockford(string $binary): string" start="159" end="194" crap="6.03" executable="21" executed="19" coverage="90.47619047619"/>
    </trait>
    <coverage>
      <line nr="34">
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
      </line>
      <line nr="40">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="41">
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="47">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
      </line>
      <line nr="48">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
      </line>
      <line nr="54">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
      </line>
      <line nr="55">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
      </line>
      <line nr="56">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
      </line>
      <line nr="57">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
      </line>
      <line nr="58">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
      </line>
      <line nr="59">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
      </line>
      <line nr="60">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
      </line>
      <line nr="61">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
      </line>
      <line nr="62">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
      </line>
      <line nr="67">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
      </line>
      <line nr="68">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
      </line>
      <line nr="72">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
      </line>
      <line nr="77">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
      </line>
      <line nr="79">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
      </line>
      <line nr="88">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="92">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="94">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="96">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="99">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="103">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="104">
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="105">
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="117">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
      </line>
      <line nr="118">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
      </line>
      <line nr="121">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="123">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="126">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="129">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="130">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="131">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="132">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="136">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="137">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="138">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="139">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="140">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="143">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="144">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="145">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="148">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="149">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="151">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="153">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="161">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="162">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="163">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="164">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="166">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="167">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="169">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="170">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="172">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="173">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="174">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="175">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="180">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="181">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="182">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="186">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="187">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="189">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
      <line nr="193">
        <covered by="P\Tests\Feature\CreateResourceUseCaseTest::__pest_evaluable_it_CreateResourceUseCase_persists_and_returns_the_created_resource"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_returns_data_without_lock"/>
        <covered by="P\Tests\Feature\GetResourceDataUseCaseTest::__pest_evaluable_GetResourceDataUseCase_locks_then_returns_data_when_lock_succeeds"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_successfully_when_no_previous_data_exists"/>
        <covered by="P\Tests\Feature\UpdateResourceDataUseCaseTest::__pest_evaluable_it_updates_resource_data_when_an_entry_already_exists__overwrite_"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_generates_26_char_identifier"/>
        <covered by="P\Tests\Unit\HasIdentifierTest::__pest_evaluable_HasIdentifier_base32_encoding_is_deterministic_for_same_input"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2">
        <token name="T_COMMENT">/*</token>
      </line>
      <line no="3">
        <token name="T_COMMENT"> * This file is a part of Small Swoole Resource Server</token>
      </line>
      <line no="4">
        <token name="T_COMMENT"> * Copyright 2025 - S&#xE9;bastien Kus</token>
      </line>
      <line no="5">
        <token name="T_COMMENT"> * Under MIT Licence</token>
      </line>
      <line no="6">
        <token name="T_COMMENT"> */</token>
      </line>
      <line no="7"/>
      <line no="8">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Domain\Application\Entity\Trait</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="9"/>
      <line no="10">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Small\Forms\Form\Field\Type\StringType</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="11">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Small\Forms\ValidationRule\ValidateNotEmpty</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="12"/>
      <line no="13">
        <token name="T_TRAIT">trait</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">HasIdentifier</token>
      </line>
      <line no="14">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="15">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ALPHABET</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'0123456789ABCDEFGHJKMNPQRSTVWXYZ'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="16"/>
      <line no="17">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/** last millisecond seen (per-process, shared) */</token>
      </line>
      <line no="18">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$lastMs</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="19">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/** per-ms sequence (20 bits, shared) */</token>
      </line>
      <line no="20">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$seq</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="21"/>
      <line no="22">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/** Swoole mutex for coroutine-safety within the process */</token>
      </line>
      <line no="23">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_NAME_FULLY_QUALIFIED">\Swoole\Lock</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$lock</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="24"/>
      <line no="25">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/** 6-byte node id (binary, shared) */</token>
      </line>
      <line no="26">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$nodeId6</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="27"/>
      <line no="28">
        <token name="T_WHITESPACE">    </token>
        <token name="T_ATTRIBUTE">#[</token>
        <token name="T_STRING">StringType</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="29">
        <token name="T_WHITESPACE">    </token>
        <token name="T_ATTRIBUTE">#[</token>
        <token name="T_STRING">ValidateNotEmpty</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="30">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$id</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="31"/>
      <line no="32">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getId</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">string</token>
      </line>
      <line no="33">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="34">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">id</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COMMENT">// or change signature to string and throw if null</token>
      </line>
      <line no="35">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="36"/>
      <line no="37">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/** Initialize lazily (once per process) */</token>
      </line>
      <line no="38">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">init</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="39">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="40">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_VARIABLE">$nodeId6</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="41">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="42">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="43"/>
      <line no="44">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// Node ID strategy:</token>
      </line>
      <line no="45">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// 1) ENV MULID_NODE_ID as 12 hex chars (e.g., "a1b2c3d4e5f6")</token>
      </line>
      <line no="46">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// 2) Else: derive from hostname + uname + interfaces (sha1) -&gt; first 6 bytes</token>
      </line>
      <line no="47">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$env</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getenv</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'MULID_NODE_ID'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="48">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_string</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$env</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">preg_match</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/^[0-9a-fA-F]{12}$/'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$env</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="49">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$bin</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">hex2bin</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strtolower</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$env</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="50">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// hex2bin() returns string|false; guard it</token>
      </line>
      <line no="51">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_VARIABLE">$nodeId6</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$bin</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$bin</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="52">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="53"/>
      <line no="54">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_VARIABLE">$nodeId6</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="55">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$src</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">gethostname</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'|'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">php_uname</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="56">
        <token name="T_WHITESPACE">            </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/sys/class/net'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$dir</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="57">
        <token name="T_WHITESPACE">                </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_dir</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$dir</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="58">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">scandir</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$dir</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$if</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="59">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_VARIABLE">$macFile</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$dir</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/address'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="60">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_AT">@</token>
        <token name="T_STRING">is_file</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$macFile</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="61">
        <token name="T_WHITESPACE">                            </token>
        <token name="T_VARIABLE">$mac</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">trim</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_AT">@</token>
        <token name="T_STRING">file_get_contents</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$macFile</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="62">
        <token name="T_WHITESPACE">                            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$mac</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$src</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'|'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mac</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="63">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="64">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="65">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="66">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="67">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$hash</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sha1</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$src</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">               </token>
        <token name="T_COMMENT">// 20 bytes</token>
      </line>
      <line no="68">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_VARIABLE">$nodeId6</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">substr</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$hash</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">6</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">   </token>
        <token name="T_COMMENT">// 6 bytes</token>
      </line>
      <line no="69">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="70"/>
      <line no="71">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// Safety: ensure length 6</token>
      </line>
      <line no="72">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_VARIABLE">$nodeId6</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_VARIABLE">$nodeId6</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">6</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="73">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// Fallback to random 6 bytes</token>
      </line>
      <line no="74">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_VARIABLE">$nodeId6</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">random_bytes</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_LNUMBER">6</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="75">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="76"/>
      <line no="77">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">class_exists</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NAME_FULLY_QUALIFIED">\Swoole\Lock</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_CLASS">class</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_VARIABLE">$lock</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="78">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// Mutex for the short critical section</token>
      </line>
      <line no="79">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_VARIABLE">$lock</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_FULLY_QUALIFIED">\Swoole\Lock</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">SWOOLE_MUTEX</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="80">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="81">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="82"/>
      <line no="83">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="84">
        <token name="T_DOC_COMMENT">     * Generate a MULID-like ID (26 chars Crockford Base32)</token>
      </line>
      <line no="85">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="86">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">generateId</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
      </line>
      <line no="87">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="88">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">init</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="89"/>
      <line no="90">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// Milliseconds since epoch; prefer hrtime to avoid float drift</token>
      </line>
      <line no="91">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// $ms = (int) floor((hrtime(true) / 1_000_000));</token>
      </line>
      <line no="92">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$ms</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_INT_CAST">(int)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">floor</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">microtime</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MULT">*</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1000</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="93"/>
      <line no="94">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$pid</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getmypid</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG">&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0xFFF</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COMMENT">// 12 bits</token>
      </line>
      <line no="95"/>
      <line no="96">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_VARIABLE">$lock</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_VARIABLE">$lock</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">lock</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="97"/>
      <line no="98">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// Monotonic: if time goes backward, clamp to lastMs</token>
      </line>
      <line no="99">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$ms</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_VARIABLE">$lastMs</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="100">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$ms</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_VARIABLE">$lastMs</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="101">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="102"/>
      <line no="103">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$ms</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_VARIABLE">$lastMs</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="104">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_VARIABLE">$seq</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_VARIABLE">$seq</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PLUS">+</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG">&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0xFFFFF</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COMMENT">// 20 bits</token>
      </line>
      <line no="105">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_VARIABLE">$seq</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="106">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COMMENT">// Overflow: wait for next millisecond</token>
      </line>
      <line no="107">
        <token name="T_WHITESPACE">                </token>
        <token name="T_DO">do</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="108">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_COMMENT">// In coroutine context, yield would be nicer:</token>
      </line>
      <line no="109">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_COMMENT">// if (class_exists('\\Swoole\\Coroutine')) \\Swoole\\Coroutine::yield();</token>
      </line>
      <line no="110">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_STRING">usleep</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="111">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$ms</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_INT_CAST">(int)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">floor</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">microtime</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MULT">*</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1000</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="112">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_WHILE">while</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$ms</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_SMALLER_OR_EQUAL">&lt;=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_VARIABLE">$lastMs</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="113">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_VARIABLE">$lastMs</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$ms</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="114">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_VARIABLE">$seq</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="115">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="116">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="117">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_VARIABLE">$lastMs</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$ms</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="118">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_VARIABLE">$seq</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="119">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="120"/>
      <line no="121">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$seq</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_VARIABLE">$seq</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="122"/>
      <line no="123">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_VARIABLE">$lock</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_VARIABLE">$lock</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">unlock</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="124"/>
      <line no="125">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// --- Pack 128 bits ---</token>
      </line>
      <line no="126">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$bytes</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_fill</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">16</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="127"/>
      <line no="128">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// [0..5] timestamp (48 bits, big-endian)</token>
      </line>
      <line no="129">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$ts</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$ms</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="130">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOR">for</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">5</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_GREATER_OR_EQUAL">&gt;=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_DEC">--</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="131">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$bytes</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$ts</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG">&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0xFF</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="132">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$ts</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_SR_EQUAL">&gt;&gt;=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">8</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="133">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="134"/>
      <line no="135">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// [6..9] = (20-bit seq &lt;&lt; 12) | 12-bit pid (BE 32 bits)</token>
      </line>
      <line no="136">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$mid</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$seq</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG">&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0xFFFFF</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_SL">&lt;&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">12</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PIPE">|</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$pid</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG">&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0xFFF</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="137">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$bytes</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">6</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$mid</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_SR">&gt;&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">24</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG">&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0xFF</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="138">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$bytes</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">7</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$mid</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_SR">&gt;&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">16</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG">&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0xFF</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="139">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$bytes</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">8</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$mid</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_SR">&gt;&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">8</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE">  </token>
        <token name="T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG">&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0xFF</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="140">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$bytes</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">9</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$mid</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE">       </token>
        <token name="T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG">&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0xFF</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="141"/>
      <line no="142">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// [10..15] node id (48 bits)</token>
      </line>
      <line no="143">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_VARIABLE">$nodeId6</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COMMENT">// 6 bytes</token>
      </line>
      <line no="144">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOR">for</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">6</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_INC">++</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="145">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$bytes</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">10</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PLUS">+</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ord</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="146">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="147"/>
      <line no="148">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$bin</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="149">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$bytes</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$b</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$bin</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">chr</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$b</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="150"/>
      <line no="151">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">id</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">encodeBase32Crockford</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$bin</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COMMENT">// 26 chars</token>
      </line>
      <line no="152"/>
      <line no="153">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="154">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="155"/>
      <line no="156">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="157">
        <token name="T_DOC_COMMENT">     * Base32 Crockford (no padding), 128 bits -&gt; 26 chars</token>
      </line>
      <line no="158">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="159">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">encodeBase32Crockford</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$binary</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="160">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="161">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$alphabet</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">ALPHABET</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="162">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="163">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$buffer</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COMMENT">// int</token>
      </line>
      <line no="164">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$bits</token>
        <token name="T_WHITESPACE">   </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COMMENT">// nombre de bits valides dans $buffer</token>
      </line>
      <line no="165"/>
      <line no="166">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$len</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$binary</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="167">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOR">for</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$len</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_INC">++</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="168">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// Pas de masque 0xFFFFFFFFFFFFFFFF ici (inutile et source du warning)</token>
      </line>
      <line no="169">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$buffer</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$buffer</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_SL">&lt;&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">8</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PIPE">|</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ord</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$binary</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="170">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$bits</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PLUS_EQUAL">+=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">8</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="171"/>
      <line no="172">
        <token name="T_WHITESPACE">            </token>
        <token name="T_WHILE">while</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$bits</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_GREATER_OR_EQUAL">&gt;=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">5</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="173">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$idx</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$buffer</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_SR">&gt;&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$bits</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">5</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG">&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0x1F</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="174">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$bits</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS_EQUAL">-=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">5</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="175">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$alphabet</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$idx</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="176">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COMMENT">// On ne r&#xE9;duit pas explicitement $buffer ; $bits suit les bits valides</token>
      </line>
      <line no="177">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="178">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="179"/>
      <line no="180">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$bits</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_GT">&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="181">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$idx</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$buffer</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_SL">&lt;&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_LNUMBER">5</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$bits</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG">&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0x1F</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="182">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$alphabet</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$idx</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="183">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="184"/>
      <line no="185">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// 128 bits / 5 = 25.6 -&gt; 26 symboles</token>
      </line>
      <line no="186">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$lenOut</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="187">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$lenOut</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">26</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="188">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">str_pad</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">26</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'0'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">STR_PAD_LEFT</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="189">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSEIF">elseif</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$lenOut</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_GT">&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">26</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="190">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">substr</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">26</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="191">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="192"/>
      <line no="193">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="194">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="195">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="196"/>
    </source>
  </file>
</phpunit>
